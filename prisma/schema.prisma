// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @unique @default(uuid())
  createdAt DateTime    @default(now())
  email     String      @unique
  password  String
  username  String      @unique
  image     String?
  profile    Profile?
  posts     Post[] // one to many relation (the user can have many posts) - this references the post model
  comments  Comment[]
  likes     Like[]
  groupUser GroupUser[]
  following Follow[]    @relation("follower")
  followers Follow[]    @relation("following")

  @@index([email])
}

model Profile {
  onBoardingCompleted Boolean  @default(false)
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String   @id
  name                String?
  journey             String?
  ambitions           String[]
  tech                String[]
  bio                 String?
  githubLink          String?
  githubHandle        String?
  linkedinLink        String?
  linkedinHandle      String?
  xProfileLink         String?
  xProfileHandle       String?
  instagramLink       String?
  instagramHandle     String?
}

model Follow {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

model Post {
  id        String    @id @default(uuid())
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade) // one to many (the post can have only one user or author) - this references the user model
  authorId  String
  title     String
  type      PostType  @default(STANDARD)
  createdAt DateTime  @default(now())
  meetDate  DateTime?
  location  String?
  content   String?
  audio     String?
  image     String?
  comments  Comment[] // one to many relation (the post can have many comments) - this references the comment model
  tags      Tag[]
  likes     Like[]
  views     Int       @default(0)
  group     Group?    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String?
}

model Like {
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String

  @@id([authorId, postId])
}

//intermediary table to link posts to tags

model Tag {
  id   String @id @default(uuid())
  name String
  post Post[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade) // one to many relation (the comment can have only one post) - this references the post model
  postId    String
}

model Group {
  id           String      @id @default(uuid())
  name         String
  profileImage  String
  coverImage   String?
  bio          String?
  posts        Post[] // one to many relation (the group can have many posts) - this references the post model
  createdAt    DateTime    @default(now())
  groupUser    GroupUser[]
  active       Boolean     @default(true)
}

model GroupUser {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  group     Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String
  isAdmin   Boolean @default(false)
  active    Boolean @default(false)
  isCreator Boolean @default(false)
}

enum PostType {
  MEETUP
  PODCAST
  STANDARD
}
